/* h1,
h2,
h3,
h4,
p,
li { */
/* list selector */
/* font-family: sans-serif; /* /* default: serif */
/* color: #444; */
/* } */

h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  font-size: 26px;
  /* font-family: sans-serif; */
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px; /* main heading h1, does not need to be the largest on in size*/
  /* font-family: sans-serif; */
  margin-bottom: 30px;
}

.post-header {
  margin-bottom: 40px;
}

h3 {
  font-size: 30px;
  /* font-family: sans-serif; */
  margin-bottom: 20px;
  margin-top: 40px;
  /* because of 40px margin-top, margin-collapsing will take place between <h3> and <p> elements, margin-collapsing means when two elements share the same space the margins between them will collapse to form only one margin 
  usually the lesser margin collapses in the larger margin */
}

h4 {
  font-size: 20px;
  /* font-family: sans-serif; */
  text-transform: uppercase;
  text-align: center;
}

p {
  font-size: 22px;
  /* font-family: sans-serif; */
  line-height: 1.5; /*some of the text stylings get inherited*/
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  /* font-family: sans-serif; */
  /* font-size: 20px; default font size is 16px */
  font-size: 20px;
  margin-bottom: 10px;
}

li:last-child {
  margin-bottom: 0;
}

/* footer p { */
/* descendant selector */
/* font-size: 16px;
} */

/* article header p { */
/* nested descendant selector */
/* encoding html structure into the css is not a good practice */
/* font-style: italic;
} */

#author {
  /* id selector */
  /* id must not be repeated, it will create an invalid html */
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

.related-author {
  /* class selector */
  /* classes can be repeated, multiple html elements can have same class name */
  /* convention: use dash(-) when the class name contains two or more words, it is ok to use underscore also as a separator but dash is more common in css */
  /* all css rules defined for an element apply on it, but only one of them will take effect */
  font-size: 18px;
  font-weight: bold;
}

/* ul { */
/*list-style: none;*/ /* removes the list styling, i.e. the bullets*/
/* } */

.related {
  list-style: none;
}

/* NOTE: */
/* in real world, we usually don't use IDs rather use CLASSES
by doing so, we are prepared for future modifications */

/* header {
  background-color: #f7f7f7;
} */

.main-header {
  background-color: #f7f7f7;
  /* padding: 20px;
  padding-left: 40px;
  padding-right: 40px; */
  padding: 20px 40px;
  margin-bottom: 60px; /* most common is to use margin bottom to create verticle space*/
  height: 80px;
}

aside {
  background-color: #f7f7f7;
  border: 5px solid #1098ad; /*border-width,border-style,border-color*/
  border-right: none;
  border-left: none;
  padding: 50px 0;
  width: 500px;
}

body {
  /* background-color: orange; */
}

/* 
.first-li {
  font-weight: bold;
} */

li:first-child {
  /* pseudo-class is denoted with : */
  /* every <li> element that is the first child */
  font-weight: bold;
}

li:last-child {
  /* every <li> element that is the last child */
  font-style: italic;
}

li:nth-child(2) {
  /* <li> element that is the 2nd child */
  /* color: red; */
}

li:nth-child(even) {
  /* <li> element that is the child that comes at even places */
  /* color: red; */
}

/* article p:first-child { */
/* select any <p> which is the first child of its parent
    if anyother element is the first child, then <p> will not be decorated
  */
/* color: red;
} */

/* article p:last-child { */
/* select any <p> inside <article> which is the last-child of its parent */
/* color: red; */
/* } */

/* styling links */
/* best practice: use pseudo-classes to style anchors */
a:link {
  /* target only the <a> which do actually have 'href' attribute */
  color: #1098ad;
  text-decoration: none;
}

a:visited {
  color: #777;
  /* best practice: give the same color for visited as the link */
  color: #1098ad;
}

a:hover {
  /* most important */
  color: orangered;
  /* font-weight: bold; */
  /* text-decoration: underline dotted orangered; */
  text-decoration: underline orangered;
}

a:active {
  /* when the link is clicked or cliked and hold, then active pseudo class is added to the element */
  background-color: black;
  font-style: italic;
}

/* order to follow for links styling: lvha */

/* Theory #1: conflict between selectors */
/* if multiple rules apply to an element then selector matters */
/* 0.0 !important */
/* 0.1 inline styles */
/* 1. ID, if multiple then last selector applies */
/* 2. CLASS or PSEUDO CLASS, if multiple then last selector applies */
/* 3. ELEMENT ---- ---- */
/* 4. universal selector, least priority */

/* #copyright {
  color: red;
}

.copyright {
  color: blue;
}

.text {
  color: yellow;
}

footer p {
  color: green !important;
} */

/* Theory #2: inheritance and universal selector */
body {
  /* color: red; */
  /* mostly text related properties get inherited */
  /* inherited properties get replaced or overridded easily by more specific rules */
  /* inherited property have the lowest priority */
  color: #444;
  font-family: sans-serif;
  border-top: 10px solid #1098ad;
  /* margin: 0; */ /* not inherited seemlesly, use universal selector */
}

/* nav a:link {
  font-size: 18px;
} */

nav {
  font-size: 18px;
}

/* universal selector */
* {
  /* lowest priority selector */
  /* universal selector selects every single */
  /* very useful when we don't want an inherited property to be applied
  rather a property for each and every element of the page */

  /* border-top: 10px solid #1098ad; */
  margin: 0; /* this reset is very common, in fact done in every project */
  padding: 0; /* this reset is very common */
}

/*NOTE: Difference between universal selector and body selector */
/* Universal selector applies rules to each and every element without inheritance being involved */
/* on the other hand, the property we put in the body get inherited to all the child element of the body element */

article {
  margin-bottom: 60px;
}

.post-image {
  /* width: 300px; */
  width: 100%; /* relative to width of the containing context */
  height: auto; /* useful in case the height is already specified in html */
}
